#the the two are multivate normal so we can use the equation
#each s1 has a different distbrution for s2 will be and then we want the probability of that replicating
calculate_pcondtional<-function(s1){
mean<-(sigma^2*s1)/(1+sigma^2)
var=1+((sigma^2)/(1+sigma^2))
p<-1-pnorm(5.2, mean, sqrt(var))
return(p)
}
calculate_pstudy1<-function(s1){
dnorm(s1,0,sqrt(1+sigma^2))
}
integrand <- function(s1){
calculate_pcondtional(s1)*calculate_pstudy1(s1)
}
integrate(integrand, lower=5.2, upper=Inf)
#actual results of simulation
# number of s1 greater than 5.2
s1_sig<-nrow(filter(results.data, s1>5.2))
s2_sig_givens1<-nrow(filter(filter(results.data, s1>5.2), s2>5.2))
repRate=s2_sig_givens1/s1_sig
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
sigma<-sqrt(2)
N=10000
lamda <- rnorm(n=N, mean=0, sd=tempSd)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
View(results.data)
View(results.data)
sigma<-sqrt(2)
N=10000
lamda <- rnorm(n=N, mean=0, sd=sigma)
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
sigma<-sqrt(2)
N=10000
lamda <- rnorm(n=N, mean=0, sd=sigma)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
true_lambda <- function(lambda){
return(lambda)
}
#probability of s2 replicating given s1
#the the two are multivate normal so we can use the equation
#each s1 has a different distbrution for s2 will be and then we want the probability of that replicating
calculate_pcondtional<-function(s1){
mean<-(sigma^2*s1)/(1+sigma^2)
var=1+((sigma^2)/(1+sigma^2))
p<-1-pnorm(5.2, mean, sqrt(var))
return(p)
}
calculate_pstudy1<-function(s1){
dnorm(s1,0,sqrt(1+sigma^2))
}
integrand <- function(s1){
calculate_pcondtional(s1)*calculate_pstudy1(s1)
}
integrate(integrand, lower=5.2, upper=Inf)
#actual results of simulation
# number of s1 greater than 5.2
s1_sig<-nrow(filter(results.data, s1>5.2))
s2_sig_givens1<-nrow(filter(filter(results.data, s1>5.2), s2>5.2))
repRate=s2_sig_givens1/s1_sig
?subset
View(results.data)
View(results.data)
vector_s1,<-subset(results.data, s1>5.2 & s1<6)$s1
vector_s1<-subset(results.data, s1>5.2 & s1<6)$s1
1000000*.0038
1000000*.00039
probabilties_conditional<-ggplot(data=filter(results.data, s1>5.2 & s1<6), mapping = aes(x=s1))
View(probabilties_conditional)
View(probabilties_conditional)
probabilties_conditional
probabilties_conditional<-ggplot(data=filter(results.data, s1>5.2 & s1<6), mapping = aes(x=s1))+
geom_point()+stat_function(fun=calculate_pcondtional(x))
probabilties_conditional<-ggplot(data=filter(results.data, s1>5.2 & s1<6), mapping = aes(x=s1))+
geom_point()+stat_function(fun=calculate_pcondtional())
probabilties_conditional<-ggplot(data=filter(results.data, s1>5.2 & s1<6), mapping = aes(x=s1))+
geom_point()+stat_function(fun=calculate_pcondtional)
probabilties_conditional
probabilties_conditional<-stat_function(fun=calculate_pcondtional)
probabilties_conditional
probabilties_conditional<-ggplot(data=filter(results.data, s1>5.2 & s1<6), mapping = aes(x=s1))+
stat_function(fun=calculate_pcondtional)
probabilties_conditional
probabilties_conditional<-ggplot(data=filter(results.data, s1>5.2 & s1<9), mapping = aes(x=s1))+
stat_function(fun=calculate_pcondtional)
probabilties_conditional
probabilties_conditional<-ggplot(data=filter(results.data, s1>0 & s1<5.2), mapping = aes(x=s1))+
stat_function(fun=calculate_pcondtional)
probabilties_conditional<-ggplot(data=filter(results.data, s1>0 & s1<5.2), mapping = aes(x=s1))+
stat_function(fun=calculate_pcondtional)
probabilties_conditional
probabilties_conditional<-ggplot(data=filter(results.data, s1>0 & s1<6), mapping = aes(x=s1))+
stat_function(fun=calculate_pcondtional)
probabilties_conditional
probabilties_conditional<-ggplot(data=filter(results.data, s1>0 & s1<100), mapping = aes(x=s1))+
stat_function(fun=calculate_pcondtional)
probabilties_conditional
mean<-function(s1){
(sigma^2*s1)/(1+sigma^2)
}
means_conditional<-ggplot(data=filter(results.data, s1>0 & s1<100), mapping = aes(x=s1))+
stat_function(fun=mean)
means_conditional
means_conditional<-ggplot(data=filter(results.data, s1>5.2 & s1<6), mapping = aes(x=s1))+
stat_function(fun=mean)
means_conditional
probabilties_conditional<-ggplot(data=filter(results.data, s1>0 & s1<100), mapping = aes(x=s1))+
stat_function(fun=calculate_pcondtional)
probabilties_conditional
#predicting whether s2 replicates given s1. Different Sample Size
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#simulating data
sigma<-sqrt(2)
N=1000000
N_1=1
#N_1=10000
z_score=5.2
#probability of s2 replicating given s1
# calculate_pcondtional<-function(s1,sampleS1, sampleS2){
#   sd_S1<-sqrt(sampleS1*sigma^2+1)
#   sd_S2<-sqrt(sampleS2*sigma^2+1)
#   mean<-(sqrt(sampleS1*sampleS2)*sigma^2*s1)/(sd_S1^2)
#   var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
#   p<- (1-pnorm(zScore, mean, sqrt(var2)))+pnorm(-zScore, mean, sqrt(var2))
#   return(p)
# }
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
lamda <- rnorm(n=N, mean=0, sd=sigma)
s1_dist<-matrix(nrow=N, ncol=1)
s2_dist1<-matrix(nrow=N, ncol=1)
s2_dist2<-matrix(nrow=N, ncol=1)
s2_dist3<-matrix(nrow=N, ncol=1)
s2_dist4<-matrix(nrow=N, ncol=1)
for (i in 1:N){
s1_dist[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist1[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1*0.5),sd=1)
s2_dist2[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist3[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1*2),sd=1)
s2_dist4[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1*5),sd=1)
}
table1<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table1)=c("N1", "N2", "S1", "Ps2")
table1$N1<-rep(N_1, N)
table1$N2<-rep(N_1*0.5, N)
table1$S1<-as.vector(s1_dist)
table1$Ps2<-calculate_pcondtional(table1$S1, N_1, table1$N2[1])
#actual replication rate table1
table1$S2<-as.vector(s2_dist1)
s1_sig<-nrow(filter(table1, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table1, S1>5.2), S2>5.2)) + nrow(filter(filter(table1, S1<(-5.2)), S2<(-5.2)))
repRate=s2_s1_sig/N
#theoretical
s1_sig_vector <-filter(table1, S1>5.2|S1<(-5.2))$S1
theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector,sampleS1 = N_1, sampleS2 = N_1*0.5))/N
table2<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table2)=c("N1", "N2", "S1", "Ps2")
table2$N1<-rep(N_1, N)
table2$N2<-rep(N_1, N)
table2$S1<-as.vector(s1_dist)
table2$Ps2<-calculate_pcondtional(table2$S1, N_1, table2$N2[1])
#actual replication rate table2
table2$S2<-as.vector(s2_dist2)
s1_sig<-nrow(filter(table2, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table2, S1>5.2), S2>5.2)) + nrow(filter(filter(table2, S1<(-5.2)), S2<(-5.2)))
repRate=s2_s1_sig/N
#theoretical
s1_sig_vector <-filter(table2, S1>5.2|S1<(-5.2))$S1
theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector,sampleS1 = N_1, sampleS2 = N_1))/N
table3<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table3)=c("N1", "N2", "S1", "Ps2")
table3$N1<-rep(N_1, N)
table3$N2<-rep(N_1*2, N)
table3$S1<-as.vector(s1_dist)
table3$Ps2<-calculate_pcondtional(table3$S1, N_1, table3$N2[1])
#actual replication rate table3
table3$S2<-as.vector(s2_dist3)
s1_sig<-nrow(filter(table3, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table3, S1>5.2), S2>5.2)) + nrow(filter(filter(table3, S1<(-5.2)), S2<(-5.2)))
repRate=s2_s1_sig/N
#theoretical
s1_sig_vector <-filter(table3, S1>5.2|S1<(-5.2))$S1
theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector,sampleS1 = N_1, sampleS2 = N_1*2))/N
table4<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table4)=c("N1", "N2", "S1", "Ps2")
table4$N1<-rep(N_1, N)
table4$N2<-rep(N_1*5, N)
table4$S1<-s1_dist
table4$Ps2<-calculate_pcondtional(table4$S1, N_1, table4$N2[1])
#plotting probabilities
probabilties_conditional<-ggplot(data=filter(table2, S1>0 & S1<100), mapping = aes(x=S1))+
stat_function(fun=calculate_pcondtional, args=list(sampleS1=N_1, sampleS2=N_1))
probabilties_conditional<-ggplot(data=filter(table3, S1>0 & S1<100), mapping = aes(x=S1))+
stat_function(fun=calculate_pcondtional, args=list(sampleS1=N_1, sampleS2=N_1*2))
#plotting the prabability of replicating given s1 true
P_S1_1<-ggplot(data=table1, mapping=aes(x=S1))+stat_function(fun=calculate_pcondtional, args=list(sampleS1=N_1, sampleS2=N_1*0.5),aes(colour="N2=0.5*N1"))+
stat_function(fun=calculate_pcondtional, args=list(sampleS1=N_1, sampleS2=N_1),aes(colour="N2=N1"))+
stat_function(fun=calculate_pcondtional, args=list(sampleS1=N_1, sampleS2=N_1*2),aes(colour="N2=2*N1"))+
stat_function(fun=calculate_pcondtional, args=list(sampleS1=N_1, sampleS2=N_1*5),aes(colour="N2=5*N1"))+
xlim(-13,13)
View(s2_dist1)
#predicting whether s2 replicates given s1. Different Sample Size
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#simulating data
sigma<-sqrt(2)
N=1000000
N_1=1
N_2=(0.5)
#N_1=10000
z_score=5.2
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
lamda <- rnorm(n=N, mean=0, sd=sigma)
s1_dist<-matrix(nrow=N, ncol=1)
s2_dist1<-matrix(nrow=N, ncol=1)
for (i in 1:N){
s1_dist[i]<-(1/N_1)*rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist1[i]<-(1/N_2)*rnorm(n=1,mean=lamda[i]*sqrt(N_1*0.5),sd=1)
}
#predicting whether s2 replicates given s1. Different Sample Size
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#simulating data
sigma<-sqrt(2)
N=1000000
N_1=1
N_2=(0.5)
#N_1=10000
z_score=5.2
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
lamda <- rnorm(n=N, mean=0, sd=sigma)
s1_dist<-matrix(nrow=N, ncol=1)
s2_dist1<-matrix(nrow=N, ncol=1)
for (i in 1:N){
s1_dist[i]<-(1/N_1)*rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist1[i]<-(1/N_2)*rnorm(n=1,mean=lamda[i]*sqrt(N_2),sd=1)
}
var(s1_dist)
mean(s1_dist)
#predicting whether s2 replicates given s1. Different Sample Size
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#simulating data
sigma<-sqrt(2)
N=1000000
N_1=1
N_2=(0.5)
#N_1=10000
z_score=5.2
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
lamda <- rnorm(n=N, mean=0, sd=sigma)
s1_dist<-matrix(nrow=N, ncol=1)
s2_dist1<-matrix(nrow=N, ncol=1)
for (i in 1:N){
s1_dist[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist1[i]<-(1/N_2)*rnorm(n=1,mean=lamda[i]*sqrt(N_2),sd=1)
}
var(s1_dist)
mean(s1_dist)
#predicting whether s2 replicates given s1. Different Sample Size
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#simulating data
sigma<-sqrt(2)
N=1000000
N_1=1
N_2=(0.5)
#N_1=10000
z_score=5.2
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
lamda <- rnorm(n=N, mean=0, sd=sigma)
s1_dist<-matrix(nrow=N, ncol=1)
s2_dist1<-matrix(nrow=N, ncol=1)
for (i in 1:N){
s1_dist[i]<-(1_N_1)*rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist1[i]<-(1/N_2)*rnorm(n=1,mean=lamda[i]*sqrt(N_2),sd=1)
}
#predicting whether s2 replicates given s1. Different Sample Size
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#simulating data
sigma<-sqrt(2)
N=1000000
N_1=1
N_2=(0.5)
#N_1=10000
z_score=5.2
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
lamda <- rnorm(n=N, mean=0, sd=sigma)
s1_dist<-matrix(nrow=N, ncol=1)
s2_dist1<-matrix(nrow=N, ncol=1)
for (i in 1:N){
s1_dist[i]<-(1/N_1)*rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist1[i]<-(1/N_2)*rnorm(n=1,mean=lamda[i]*sqrt(N_2),sd=1)
}
mean(s1_dist)
var(s1_dist)
mean(s2_dist1)
var(s2_dist1)
(1/(0.5))^2
var(rnorm(n=1,mean=lamda[i]*sqrt(N_2),sd=1))
s1s2<-(s1_dist)-(s2_dist1)
s1s2<-(s1_dist)-(s2_dist1)
var(s1s2)
(1/N_1)+(1/N_2)
#simulating data
sigma<-sqrt(2)
N=1000000
N_1=1
N_2=(0.5)
#N_1=10000
z_score=5.2
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
lamda <- rnorm(n=N, mean=0, sd=sigma)
s1_dist<-matrix(nrow=N, ncol=1)
s2_dist1<-matrix(nrow=N, ncol=1)
for (i in 1:N){
s1_dist[i]<-(1/sqrt(N_1))*rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist1[i]<-(1/sqrt(N_2))*rnorm(n=1,mean=lamda[i]*sqrt(N_2),sd=1)
}
s1s2<-(s1_dist)-(s2_dist1)
var(s1s2)
(1/N_1)+(1/N_2)
#simulating data
sigma<-sqrt(2)
N=1000000
N_1=100
N_2=200
#N_1=10000
z_score=5.2
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
lamda <- rnorm(n=N, mean=0, sd=sigma)
s1_dist<-matrix(nrow=N, ncol=1)
s2_dist1<-matrix(nrow=N, ncol=1)
for (i in 1:N){
s1_dist[i]<-(1/sqrt(N_1))*rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist1[i]<-(1/sqrt(N_2))*rnorm(n=1,mean=lamda[i]*sqrt(N_2),sd=1)
}
s1s2<-(s1_dist)-(s2_dist1)
var(s1s2)
(1/N_1)+(1/N_2)
