#pulling lamda from normal distrubtion
tempSd<-sqrt(1)
N=10000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=tempSd/sqrt(sampleSize))
#results<-data.frame(nrow(10000),ncol(3))
results<-matrix(nrow=10000, ncol=3)
for(i in 1:10000){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i]*sqrt(sampleSize),sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
#comparing test statistic
s_noLamda <- rnorm(n=10000, mean=0, sd=sqrt(1+tempSd*tempSd))
d_theo <- density(s_noLamda)
d_prac <- density(results[,2])
plot(range(d_theo$x, d_prac$x), range(d_theo$y, d_prac$y), type = "n", xlab = "S-test statistics",
ylab = "Density")
lines(d_theo, col = "red")
lines(d_prac, col = "blue")
library(tidyverse)
#pulling lamda from normal distrubtion
tempSd<-sqrt(2)
N=10000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=tempSd)
#den_init_lambda <- density(lamda)
#plot(den_init_lambda)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
true_lambda <- function(lambda){
return(lambda)
}
#plot(results.data[,c(1,2)])
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()
s1VSlamda <- s1VSlamda + stat_function(fun=true_lambda,geom="line",colour="blue")
ggsave(filename="s1_VS_lambda.jpg")
#den_lambda = density(filter(results.data,s1>5.2 | s1<(-5.2) && lamda>0)$s1)
#den_lambda = density(filter(results.data,s1>5.2 | s1<(-5.2))$lamda)
#plot(den_lambda)
sig_stats<-ggplot(data = filter(results.data, s1>5.2 | s1<(-5.2)), mapping = aes(x = lamda, y = s1)) +geom_point()
ggsave(filename="lambda_significant_stats.jpg")
sig_lambda <- ggplot(data = filter(results.data, lambda>5.2 | lambda<(-5.2)), mapping = aes(x = lamda, y = s1)) +geom_point()
#s1 is the colums
#s2 is the rows
sig_lambda <- ggplot(data = filter(results.data, lamda>5.2 | lambda<(-5.2)), mapping = aes(x = lamda, y = s1)) +geom_point()
sig_lambda <- ggplot(data = filter(results.data, lamda>5.2 | lamda<(-5.2)), mapping = aes(x = lamda, y = s1)) +geom_point()
sig_lambda
library(tidyverse)
#here we are plotting are plotting the test statistic against the lamda that generated it.
#Our test statsitic is ditbruted normally with mean lamda and therefore the test statistic and the values of lambda
#should not differ very much. only the variance should make a difference. We want to see how closely they match
#pulling lamda from normal distrubtion
tempSd<-sqrt(2)
N=10000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=tempSd)
#to check if the lamda drawn is normally ditrbuted
#den_init_lambda <- density(lamda)
#plot(den_init_lambda)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
true_lambda <- function(lambda){
return(lambda)
}
#plot(results.data[,c(1,2)])
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()
s1VSlamda <- s1VSlamda + stat_function(fun=true_lambda,geom="line",colour="blue")
ggsave(filename="s1_VS_lambda.jpg")
#den_lambda = density(filter(results.data,s1>5.2 | s1<(-5.2) && lamda>0)$s1)
#den_lambda = density(filter(results.data,s1>5.2 | s1<(-5.2))$lamda)
#plot(den_lambda)
sig_stats<-ggplot(data = filter(results.data, s1>5.2 | s1<(-5.2)), mapping = aes(x = lamda, y = s1)) +geom_point()
ggsave(filename="lambda_significant_stats.jpg")
sig_lambda <- ggplot(data = filter(results.data, lamda>5.2 | lamda<(-5.2)), mapping = aes(x = lamda, y = s1)) +geom_point()
sig_lambda
den_init_lambda <- density(lamda)
plot(den_init_lambda)
tempSd<-sqrt(4)
N=10000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=tempSd)
den_init_lambda <- density(lamda)
plot(den_init_lambda)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
sig_lambda <- ggplot(data = filter(results.data, lamda>5.2 | lamda<(-5.2)), mapping = aes(x = lamda, y = s1)) +geom_point()
sig_lambda
library(tidyverse)
#here we are plotting are plotting the test statistic against the lamda that generated it.
#Our test statsitic is ditbruted normally with mean lamda and therefore the test statistic and the values of lambda
#should not differ very much. only the variance should make a difference. We want to see how closely they match
#pulling lamda from normal distrubtion
tempSd<-sqrt(2)
N=10000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=tempSd)
#to check if the lamda drawn is normally ditrbuted
den_init_lambda <- density(lamda)
plot(den_init_lambda)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
true_lambda <- function(lambda){
return(lambda)
}
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()+xlim(-7,7)
s1VSlamda <- s1VSlamda + stat_function(fun=true_lambda,geom="line",colour="blue")
s1VSlamb
s1VSlamda
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()+scale_fill_continuous(limits=c(-7, 7), breaks=seq(-7,7,by=1))
s1VSlamda <- s1VSlamda + stat_function(fun=true_lambda,geom="line",colour="blue")
s1VSlamda
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()+scale_fill_continuous(limits=c(-7, 7), breaks=seq(-7,7,by=1))+ stat_function(fun=true_lambda,geom="line",colour="blue")
s1VSlamda
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()+scale_fill_continuous(breaks=seq(-7,7,by=1))+ stat_function(fun=true_lambda,geom="line",colour="blue")
s1VSlamda
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()+scale_fill_continuous(limits=c(-8, 8), breaks=seq(-8,8,by=1))+ stat_function(fun=true_lambda,geom="line",colour="blue")
s1VSlamda
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()+scale_x_continuous(breaks=seq(-8,8,by=1))+scale_y_continuous(breaks=seq(-8,8,by=1))+ stat_function(fun=true_lambda,geom="line",colour="blue")
s1VSlamda
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()+scale_x_continuous(limits=c(-8,8))+scale_y_continuous(limits=c(-8,8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
s1VSlamda
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()+scale_x_continuous(breaks=-8:8)+scale_y_continuous(breaks=-8:8)+ stat_function(fun=true_lambda,geom="line",colour="blue")
s1VSlamda
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()+scale_x_continuous(breaks=-8:8)+ stat_function(fun=true_lambda,geom="line",colour="blue")
s1VSlamda
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
s1VSlamda
library(tidyverse)
#here we are plotting are plotting the test statistic against the lamda that generated it.
#Our test statsitic is ditbruted normally with mean lamda and therefore the test statistic and the values of lambda
#should not differ very much. only the variance should make a difference. We want to see how closely they match
#pulling lamda from normal distrubtion
tempSd<-sqrt(2)
N=10000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=tempSd)
#to check if the lamda drawn is normally ditrbuted
den_init_lambda <- density(lamda)
plot(den_init_lambda)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
true_lambda <- function(lambda){
return(lambda)
}
#plot(results.data[,c(1,2)])
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="red")) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
ggsave(filename="s1_VS_lambda.jpg")
#den_lambda = density(filter(results.data,s1>5.2 | s1<(-5.2) && lamda>0)$s1)
#den_lambda = density(filter(results.data,s1>5.2 | s1<(-5.2))$lamda)
#plot(den_lambda)
sig_stats<-ggplot(data = filter(results.data, s1>5.2 | s1<(-5.2)), mapping = aes(x = lamda, y = s1)) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))
ggsave(filename="lambda_significant_stats.jpg")
#significant lambda values with smaller test stats
#sig_lambda <- ggplot(data = filter(results.data, lamda>5.2 | lamda<(-5.2)), mapping = aes(x = lamda, y = s1)) +geom_point()
#s1 is the colums
#s2 is the rows
cont_table = matrix(c(0,0,0,0),nrow=2,ncol=2)
for (i in 1:N){
boolS1=(results[i,2] > 5.2 | results[i,2] < -5.2)
boolS2=(results[i,3] > 5.2 | results[i,3] < -5.2)
if (boolS1 && boolS2){
cont_table[2,2] <- cont_table[2,2]+1
}else if (!boolS1 && boolS2){
cont_table[2,1] <- cont_table[2,1]+1
}else if (boolS1 && (!boolS2)){
cont_table[1,2] <- cont_table[1,2]+1
}else{
cont_table[1,1] <- cont_table[1,1]+1
}
}
#plotting s1 VS s2 when s1>4
#dashed red line represents all the points that replicated out of the ones that should've replicated
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#pulling lamda from normal distrubtion
tempSd<-sqrt(2)
N=10000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=tempSd)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
#predictions
#bivirate probabilities / condtional
var_g=2
sd_g_lamda=sqrt(var_g)
sd_g_s=sqrt(1+var_g)
s1=5.2
cor_lam_S=(var_g)/(sd_g_lamda*sd_g_s)
computeMean<-function(s1){
(var_g*s1)/(1+var_g)
}
computeMean(results[,2])
results.data$pred_lambda <- computeMean(results.data$s1)
View(results.data)
true_lambda <- function(lambda){
return(lambda)
}
s1VSlamda<-ggplot(data = results.data, mapping = aes(x = lamda, y = pred_lambda,colour="red")) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = pred_lambda,colour="red")) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
#plotting s1 VS s2 when s1>4
#dashed red line represents all the points that replicated out of the ones that should've replicated
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#pulling lamda from normal distrubtion
tempSd<-sqrt(2)
N=10000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=tempSd)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
true_lambda <- function(lambda){
return(lambda)
}
#predictions
#bivirate probabilities / condtional
var_g=2
sd_g_lamda=sqrt(var_g)
sd_g_s=sqrt(1+var_g)
s1=5.2
cor_lam_S=(var_g)/(sd_g_lamda*sd_g_s)
computeMean<-function(s1){
(var_g*s1)/(1+var_g)
}
results.data$pred_lambda <- computeMean(results.data$s1)
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = pred_lambda,colour="red")) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
#ggsave(filename="trueVSpred.jpg")
#correction for winners curse
#lamda_pred<-rnorm(n=1000, mean=(var_g*s1)/(1+var_g), sd=sqrt(var_g/(1+var_g)))
#s2_pred<-rnorm(n=1, mean=(var_g*s1)/(1+var_g), sd=sqrt((1+var_g)^2-(var_g)^2)/(1+var_g))
trueVSpred
#plotting s1 VS s2 when s1>4
#dashed red line represents all the points that replicated out of the ones that should've replicated
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#pulling lamda from normal distrubtion
tempSd<-sqrt(2)
N=10000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=tempSd)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
true_lambda <- function(lambda){
return(lambda)
}
#predictions
#bivirate probabilities / condtional
var_g=2
sd_g_lamda=sqrt(var_g)
sd_g_s=sqrt(1+var_g)
cor_lam_S=(var_g)/(sd_g_lamda*sd_g_s)
computeMean<-function(s1){
(var_g*s1)/(1+var_g)
}
results.data$pred_lambda <- computeMean(results.data$s1)
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = pred_lambda,colour="red")) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
#ggsave(filename="trueVSpred.jpg")
#correction for winners curse
#lamda_pred<-rnorm(n=1000, mean=(var_g*s1)/(1+var_g), sd=sqrt(var_g/(1+var_g)))
#s2_pred<-rnorm(n=1, mean=(var_g*s1)/(1+var_g), sd=sqrt((1+var_g)^2-(var_g)^2)/(1+var_g))
trueVSpred
#plotting s1 VS s2 when s1>4
#dashed red line represents all the points that replicated out of the ones that should've replicated
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#pulling lamda from normal distrubtion
tempSd<-sqrt(2)
N=10000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=tempSd)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
true_lambda <- function(lambda){
return(lambda)
}
#predictions
#bivirate probabilities / condtional
var_g=2
sd_g_lamda=sqrt(var_g)
sd_g_s=sqrt(1+var_g)
cor_lam_S=(var_g)/(sd_g_lamda*sd_g_s)
computeMean<-function(s1){
(var_g*s1)/(1+var_g)
}
results.data$pred_lambda <- computeMean(results.data$s1)
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = pred_lambda,colour="red")) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
#ggsave(filename="trueVSpred.jpg")
#correction for winners curse
#lamda_pred<-rnorm(n=1000, mean=(var_g*s1)/(1+var_g), sd=sqrt(var_g/(1+var_g)))
#s2_pred<-rnorm(n=1, mean=(var_g*s1)/(1+var_g), sd=sqrt((1+var_g)^2-(var_g)^2)/(1+var_g))
trueVSpred
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#pulling lamda from normal distrubtion
sigma<-sqrt(2)
N=10000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=sigma)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
true_lambda <- function(lambda){
return(lambda)
}
compute_mean <- function(s1){
sigma^2*s1/(1+sigma^2)
}
results.data$pred_lambda <- computeMean(results.data$s1)
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = pred_lambda,colour="red")) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred + ggplot(data = results.data, mapping = aes(x = lamda, y = s1,colour="s1")) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = pred_lambda,colour="pred_lambda")+aes(x = lamda, y = s1,colour="s1")) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
?melt
melt(results.data)
melt(results.data,id.vars=c("lamda","s1","s2","lambda_pred"))
View(results.data)
melt(results.data,id.vars=c("lamda","s1","s2","pred_lambda"))
melt(results.data,id.variable.name=c("lamda","s1","s2","pred_lambda"))
melt(results.data,variable.name=c("lamda","s1","s2","pred_lambda"))
melt(results.data,measure.vars = =c("lamda","s1","s2","pred_lambda"))
melt(results.data,measure.vars=c("lamda","s1","s2","pred_lambda"))
temp_melt <-melt(results.data,measure.vars=c("lamda","s1","s2","pred_lambda"))
View(temp_melt)
?filter
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
?filter
?filter()
result.melted <-melt(results.data,measure.vars=c("lamda","s1","s2","pred_lambda"))
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = filter(results.melted, variable=="s1"|variable=="pred_lambda"),colour=c("s1","pred_lambda")) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
fdjk
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = filter(results.melted, variable=="s1"|variable=="pred_lambda"),colour=c("s1","pred_lambda"))) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
result.melted <-melt(results.data,measure.vars=c("lamda","s1","s2","pred_lambda"))
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = filter(results.melted, variable=="s1"|variable=="pred_lambda"),colour=c("s1","pred_lambda"))) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = filter(result.melted, variable=="s1"|variable=="pred_lambda"),colour=c("s1","pred_lambda"))) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
s1_pred <- filter(result.melted, variable=="s1"|variable=="pred_lambda")
View(s1_pred)
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1_pred ,colour=c("s1","pred_lambda"))) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1_pred ,group=c("s1","pred_lambda"))) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1_pred)) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1_pred)) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = pred_lambda,colour="red")) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1_pred,group=c("s1","pred_lambda"))) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1_pred$value,group=c("s1","pred_lambda"))) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = results.data, mapping = aes(x = lamda, y = s1_pred$value)) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
View(s1_pred)
?subset
s1_val <- results.data[c("lamda","s1")]
s1_val
s1_val <- results.data[c("lamda","s1")]
s1_val$group = rep("s1",10000)
pred_val <- results.data[c("lamda","pred_lambda")]
pred_val$group = rep("pred",10000)
s1_val <- results.data[c("lamda","s1")]
s1_val$group = rep("s1",10000)
colnames(s1_val) = c("lamda","value")
pred_val <- results.data[c("lamda","pred_lambda")]
pred_val$group = rep("pred",10000)
colnames(pred_val) = c("lamda","value")
View(pred_val)
result.sp.data <- rbind(s1_val,pred_val)
View(result.sp.data)
trueVSpred<-ggplot(data = result.sp.data, mapping = aes(x = lamda, y =value,group=group)) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = result.sp.data, mapping = aes(x = lamda, y =value,group=grouping)) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = result.sp.data, mapping = aes(x = lamda, y =value,group=c("s1","pred"))) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = result.sp.data, mapping = aes(x = lamda, y =value,fill=c("s1","pred"))) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = result.sp.data, mapping = aes(x = lamda, y =value)) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = result.sp.data, mapping = aes(x = lamda, y =value, colour=result.sp.data$grouping)) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
trueVSpred<-ggplot(data = result.sp.data, mapping = aes(x = lamda, y =value, colour=(result.sp.data$grouping))) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
result.sp.data$grouping
s1_val <- results.data[c("lamda","s1")]
s1_val$grouping = rep("s1",10000)
colnames(s1_val) = c("lamda","value")
pred_val <- results.data[c("lamda","pred_lambda")]
pred_val$grouping = rep("pred",10000)
colnames(pred_val) = c("lamda","value")
result.sp.data <- rbind(s1_val,pred_val)
result.sp.data$grouping
View(result.sp.data)
colnames(result.sp.data) = = c("lamda","value","grouping")
trueVSpred<-ggplot(data = result.sp.data, mapping = aes(x = lamda, y =value, colour=grouping)) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
trueVSpred
(result.sp.data$grouping)
colnames(result.sp.data) <- c("lamda","value","grouping")
View(result.sp.data)
trueVSpred<-ggplot(data = result.sp.data, mapping = aes(x = lamda, y =value, colour=(result.sp.data$grouping))) +geom_point()+scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))+ stat_function(fun=true_lambda,geom="line",colour="blue")
(result.sp.data$grouping)
trueVSpred
