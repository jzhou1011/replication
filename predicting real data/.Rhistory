g_estimates[i]<-max_g
e_estimates[i]<-s1-max_g
}
proportion_1<-s1_sig
proportion_1$lambda_est<-g_estimates
proportion_1$env_est<-e_estimates
proportion_1$lambda<-proportion_1$lambda*sqrt(N_1)
View(proportion_1)
proportion_1$env<-proportion_1$s1_dist-proportion_1$lambda
View(proportion_1)
proportion_1<-proportion_1[,-3]
View(proportion_1)
View(proportion_1)
proportion_1<-proportion_1[,c(2,1,3,5,4)]
View(proportion_1)
lambda_prop_1<-s1_dist/(N_1*var_g_est2+1)*var_g_est2*N_1
env_prop_1<-s1_dist/(N_1*var_g_est2+1)*1
proportion_2<-s1_sig
proportion_2$lambda_est<-lambda_prop_1
proportion_2$env_est<-env_prop_1
lambda_prop_1<-s1_sig$s1_dist/(N_1*var_g_est2+1)*var_g_est2*N_1
env_prop_1<-s1_sig$s1_dist/(N_1*var_g_est2+1)*1
proportion_2<-s1_sig
proportion_2$lambda_est<-lambda_prop_1
proportion_2$env_est<-env_prop_1
View(proportion_2)
proportion_2$env_<-s1_sig$s1_dist-proportion_2$lambda
View(proportion_2)
proportion_2$env<-s1_sig$s1_dist-proportion_2$lambda
lambda_prop_1<-s1_sig$s1_dist/(N_1*var_g_est2+1)*var_g_est2*N_1
env_prop_1<-s1_sig$s1_dist/(N_1*var_g_est2+1)*1
proportion_2<-s1_sig
proportion_2$lambda_est<-lambda_prop_1
proportion_2$env_est<-env_prop_1
proportion_2$env<-s1_sig$s1_dist-proportion_2$lambda
View(proportion_2)
proportion_2<-proportion_2[,c(2,1,4,6,5)]
View(proportion_2)
View(proportion_1)
proportion_2<-s1_sig
proportion_1<-s1_sig
View(proportion_1)
View(proportion_2)
proportion_1$lambda_est<-g_estimates
proportion_1$env_est<-e_estimates
proportion_1$lambda<-proportion_1$lambda*sqrt(N_1)
proportion_1$env<-proportion_1$s1_dist-proportion_1$lambda
proportion_1<-proportion_1[,-3]
proportion_1<-proportion_1[,c(2,1,3,5,4)]
lambda_prop_1<-s1_sig$s1_dist/(N_1*var_g_est2+1)*var_g_est2*N_1
env_prop_1<-s1_sig$s1_dist/(N_1*var_g_est2+1)*1
proportion_2<-s1_sig
proportion_2$lambda_est<-lambda_prop_1
proportion_2$env_est<-env_prop_1
proportion_2$env<-s1_sig$s1_dist-proportion_2$lambda
proportion_2<-proportion_2[,c(2,1,4,6,5)]
proportion_1<-s1_sig
proportion_1$lambda_est<-g_estimates
View(proportion_1)
proportion_1$env_est<-e_estimates
View(proportion_1)
lambda_prop_1<-s1_sig$s1_dist/(N_1*var_g_est2+1)*var_g_est2*N_1
env_prop_1<-s1_sig$s1_dist/(N_1*var_g_est2+1)*1
proportion_2<-s1_sig
proportion_1$lambda<-proportion_1$lambda*sqrt(N_1)
proportion_2$lambda_est<-lambda_prop_1
proportion_2$env_est<-env_prop_1
proportion_2$env<-s1_sig$s1_dist-proportion_2$lambda
proportion_2<-proportion_2[,c(2,1,4,6,5)]
View(proportion_1)
View(proportion_2)
proportion_1<-s1_sig
proportion_1$lambda_est<-g_estimates
proportion_1$env_est<-e_estimates
proportion_1$lambda<-proportion_1$lambda*sqrt(N_1)
proportion_1$env<-proportion_1$s1_dist-proportion_1$lambda
proportion_1<-proportion_1[,-3]
proportion_1<-proportion_1[,c(2,1,3,5,4)]
View(proportion_1)
View(proportion_2)
lambda_prop_1<-s1_sig$s1_dist/(N_1*var_g_est2+1)*var_g_est2*N_1
env_prop_1<-s1_sig$s1_dist/(N_1*var_g_est2+1)*1
proportion_2<-s1_sig
proportion_2$lambda<-proportion_2$lambda*sqrt(N_1)
proportion_2$lambda_est<-lambda_prop_1
proportion_2$env_est<-env_prop_1
proportion_2$env<-s1_sig$s1_dist-proportion_2$lambda
proportion_2<-proportion_2[,c(2,1,4,6,5)]
View(proportion_2)
library(tidyverse)
library(dplyr)
#install.packages("mvtnorm")
library(mvtnorm)
var_g<-2
var_c1<-2
var_c2<-4
M<-1000
N_1<-2
N_2<-3
zscore1<-qnorm(0.05/M,lower.tail = FALSE)
lambda<-rnorm(n=M, mean=0, sd=sqrt(var_g))
s1_dist<-as.vector(matrix(nrow=M, ncol=1))
s2_dist<-as.vector(matrix(nrow=M, ncol=1))
#without confounding
#delta1<-rnorm(n=M, mean=0, sd=sqrt(var_c1))
#delta2<-rnorm(n=M, mean=0, sd=sqrt(var_c2))
for (i in 1:M){
s1_dist[i]<-rnorm(n=1,mean=sqrt(N_1)*(lambda[i]),sd=1)
s2_dist[i]<-rnorm(n=1,mean=sqrt(N_2)*(lambda[i]),sd=1)
}
results.data<-data.frame(lambda,s1_dist,s2_dist)
s1_sig<-filter(results.data,s1_dist>zscore1)
num_s1<-nrow(s1_sig)
zscore2<-qnorm(0.05/num_s1,lower.tail = FALSE)
s1_s2_sig<-filter(s1_sig,s2_dist>zscore2)
#s1 variance
MLE<-function(var){
estimate<-choose(M,num_s1)
for(i in s1_sig$s1){
estimate<-estimate*dnorm(i, mean=0, sd=sqrt(var))
}
estimate<-estimate*(pnorm(zscore1, mean=0, sd=sqrt(var)))^(M-num_s1)
}
max<-0
maxVar<-0
for(i in seq(from=0.001, to=50, by=.001)){
temp<-MLE(i)
#print(temp)
if (temp>max) {
max<-temp
maxVar<-i
}
}
expected_mean_ratio<-function(sigma_g_2){
sqrt(N_1*N_2)*sigma_g_2/maxVar
}
sigma_g_estimator <- 0
min_rms <- 10000
var_g_est2 <- 0
for (i in 1:10000){
ratio<-expected_mean_ratio(sigma_g_estimator)
expected_s2 <- s1_sig$s1_dist*ratio
cur_rms <- sqrt(sum((expected_s2-s1_sig$s2_dist)^2))
if (cur_rms < min_rms){
min_rms<- cur_rms
var_g_est2 <- sigma_g_estimator
}
sigma_g_estimator <- sigma_g_estimator+0.001
}
calculate_pcondtional<-function(s1,var_s1,var_cur,val){
mean<-var_cur/var_s1*s1
var<-var_cur-(var_cur^2)/(var_s1)
p<-dnorm(val,mean,sqrt(var))
return (p)
}
#account already that g+e=s1
MLE_ge<-function(g,s1){
g_prob<-100*calculate_pcondtional(s1,N_1*var_g_est2+1,N_1*var_g_est2,g)
e_prob<-100*calculate_pcondtional(s1,N_1*var_g_est2+1,1,s1-g)
return (g_prob*e_prob)
}
g_estimates <- rep(1,length(s1_sig$s1_dist))
e_estimates <- rep(1,length(s1_sig$s1_dist))
for(i in 1:nrow(s1_sig)){
s1<-s1_sig$s1_dist[i]
max_prob <- 0
max_g<- 0
max_c<- 0
for(g in seq(from=(-abs(s1)*2),to=(abs(s1)*2), by=0.01)){
cur_prob <- MLE_ge(g,s1)
if(cur_prob>max_prob){
max_prob<-cur_prob
max_g<-g
}
}
#cat(max_g)
#cat(max_prob)
#cat("\n")
g_estimates[i]<-max_g
e_estimates[i]<-s1-max_g
}
proportion_1<-s1_sig
proportion_1$lambda_est<-g_estimates
proportion_1$env_est<-e_estimates
proportion_1$lambda<-proportion_1$lambda*sqrt(N_1)
proportion_1$env<-proportion_1$s1_dist-proportion_1$lambda
proportion_1<-proportion_1[,-3]
proportion_1<-proportion_1[,c(2,1,3,5,4)]
#using just mean
lambda_prop_1<-s1_sig$s1_dist/(N_1*var_g_est2+1)*var_g_est2*N_1
env_prop_1<-s1_sig$s1_dist/(N_1*var_g_est2+1)*1
proportion_2<-s1_sig
proportion_2$lambda<-proportion_2$lambda*sqrt(N_1)
proportion_2$lambda_est<-lambda_prop_1
proportion_2$env_est<-env_prop_1
proportion_2$env<-s1_sig$s1_dist-proportion_2$lambda
proportion_2<-proportion_2[,c(2,1,4,6,5)]
cov(delta1,lambda)
cov(delta1,s1_dist)
library(tidyverse)
library(dplyr)
#install.packages("mvtnorm")
library(mvtnorm)
var_g<-2
var_c1<-2
var_c2<-4
M<-10000
N_1<-2
N_2<-3
zscore1<-qnorm(0.05/M,lower.tail = FALSE)
lambda<-rnorm(n=M, mean=0, sd=sqrt(var_g))
s1_dist<-as.vector(matrix(nrow=M, ncol=1))
s2_dist<-as.vector(matrix(nrow=M, ncol=1))
delta1<-rnorm(n=M, mean=0, sd=sqrt(var_c1))
delta2<-rnorm(n=M, mean=0, sd=sqrt(var_c2))
for (i in 1:M){
s1_dist[i]<-rnorm(n=1,mean=sqrt(N_1)*(lambda[i]+delta1[i]),sd=1)
s2_dist[i]<-rnorm(n=1,mean=sqrt(N_2)*(lambda[i]+delta2[i]),sd=1)
}
results.data<-data.frame(lambda,s1_dist,delta1, s2_dist,delta2)
cov(delta1,lambda)
cov(delta1,s1_dist)
cov(lambda,s1_dist)
cov(lambda,s2_dist)
library(tidyverse)
library(dplyr)
#install.packages("mvtnorm")
library(mvtnorm)
var_g<-2
var_c1<-2
var_c2<-4
M<-10000
N_1<-2
N_2<-3
zscore1<-qnorm(0.05/M,lower.tail = FALSE)
lambda<-rnorm(n=M, mean=0, sd=sqrt(var_g))
s1_dist<-as.vector(matrix(nrow=M, ncol=1))
s2_dist<-as.vector(matrix(nrow=M, ncol=1))
delta1<-rnorm(n=M, mean=0, sd=sqrt(var_c1))
delta2<-rnorm(n=M, mean=0, sd=sqrt(var_c2))
for (i in 1:M){
s1_dist[i]<-rnorm(n=1,mean=sqrt(N_1)*(lambda[i]+delta1[i]),sd=1)
s2_dist[i]<-rnorm(n=1,mean=sqrt(N_2)*(lambda[i]+delta2[i]),sd=1)
}
results.data<-data.frame(lambda,s1_dist,delta1, s2_dist,delta2)
cov(delta1,lambda)
cov(delta1,s1_dist)
cov(lambda,s1_dist)
cov(delta1,s1_dist)
cov(lambda,s2_dist)
library(tidyverse)
library(dplyr)
#install.packages("mvtnorm")
library(mvtnorm)
var_g<-2
var_c1<-2
var_c2<-4
M<-1000000
N_1<-2
N_2<-3
zscore1<-qnorm(0.05/M,lower.tail = FALSE)
lambda<-rnorm(n=M, mean=0, sd=sqrt(var_g))
s1_dist<-as.vector(matrix(nrow=M, ncol=1))
s2_dist<-as.vector(matrix(nrow=M, ncol=1))
delta1<-rnorm(n=M, mean=0, sd=sqrt(var_c1))
delta2<-rnorm(n=M, mean=0, sd=sqrt(var_c2))
for (i in 1:M){
s1_dist[i]<-rnorm(n=1,mean=sqrt(N_1)*(lambda[i]+delta1[i]),sd=1)
s2_dist[i]<-rnorm(n=1,mean=sqrt(N_2)*(lambda[i]+delta2[i]),sd=1)
}
results.data<-data.frame(lambda,s1_dist,delta1, s2_dist,delta2)
cov(delta1,lambda)
cov(delta1,s1_dist)
cov(lambda,s1_dist)
cov(delta1,s1_dist)
cov(lambda,s2_dist)
cov(delta1,s1_dist)/sqrt(N_1)
cov(lambda,s1_dist)/sqrt(N_1)
cov(delta2,s2_dist)/sqrt(N_2)
cov(lambda,s2_dist)/sqrt(N_2)
cov(sqrt(N_1)*delta1,s1_dist)
cov(sqrt(N_1)*lambda,s1_dist)
cov(sqrt(N_2)*delta2,s2_dist)
cov(sqrt(N_2)*lambda,s2_dist)
library(tidyverse)
library(dplyr)
#install.packages("mvtnorm")
library(mvtnorm)
var_g<-2
var_c1<-2
var_c2<-4
M<-1000
N_1<-2
N_2<-3
zscore1<-qnorm(0.05/M,lower.tail = FALSE)
lambda<-rnorm(n=M, mean=0, sd=sqrt(var_g))
s1_dist<-as.vector(matrix(nrow=M, ncol=1))
s2_dist<-as.vector(matrix(nrow=M, ncol=1))
delta1<-rnorm(n=M, mean=0, sd=sqrt(var_c1))
delta2<-rnorm(n=M, mean=0, sd=sqrt(var_c2))
for (i in 1:M){
s1_dist[i]<-rnorm(n=1,mean=sqrt(N_1)*(lambda[i]+delta1[i]),sd=1)
s2_dist[i]<-rnorm(n=1,mean=sqrt(N_2)*(lambda[i]+delta2[i]),sd=1)
}
results.data<-data.frame(lambda,s1_dist,delta1, s2_dist,delta2)
s1_sig <- filter(results.data,s1_dist>zscore1)
num_s1 <-nrow(s1_sig)
zscore2<-qnorm(0.05/num_s1,lower.tail = FALSE)
s1_s2_sig<-filter(s1_sig,s2_dist>zscore2)
#s1 variance
MLE<-function(var){
estimate<-choose(M,num_s1)
for(i in s1_sig$s1){
estimate<-estimate*dnorm(i, mean=0, sd=sqrt(var))
}
estimate<-estimate*(pnorm(zscore1, mean=0, sd=sqrt(var)))^(M-num_s1)
}
max<-0
maxVar<-0
for(i in seq(from=0.001, to=50, by=.001)){
temp<-MLE(i)
#print(temp)
if (temp>max) {
max<-temp
maxVar<-i
}
}
#sigma_g
#sigma_g <- mean(s1_sig$s2_dist/s1_sig$s1_dist)*maxVar/sqrt(N_1*N_2)
var_g_est1 <- mean(s1_sig$s2_dist)/mean(s1_sig$s1_dist)*maxVar/sqrt(N_1*N_2)
#first method to estimate c1
c1_est1<-(maxVar-1-var_g_est1*(N_1))/(N_1)
#estimating c2
#this is not accuraute and we must fine another way to do this.
# var_1<-((s1_sig$s1_dist)*(sqrt(N_2)))-(s1_sig$s2_dist*(sqrt(N_1)))
# var_1<-var(var_1)/(N_1+N_2)
#
# expected<-(N_2*(1+N_1*var_c1)+N_1*(1+N_2*var_c2))/(N_1+N_2)
#second method to estimate sigma_g
expected_mean_ratio<-function(sigma_g_2){
sqrt(N_1*N_2)*sigma_g_2/maxVar
}
sigma_g_estimator <- 0
min_rms <- 10000
var_g_est2 <- 0
for (i in 1:10000){
ratio<-expected_mean_ratio(sigma_g_estimator)
expected_s2 <- s1_sig$s1_dist*ratio
cur_rms <- sqrt(sum((expected_s2-s1_sig$s2_dist)^2))
if (cur_rms < min_rms){
min_rms<- cur_rms
var_g_est2 <- sigma_g_estimator
}
sigma_g_estimator <- sigma_g_estimator+0.001
}
c1_est2<-(maxVar-1-var_g_est2*(N_1))/(N_1)
#estimating sigmac2
#using corrected s1
expected_mean_lambda<-function(s1, c1, var_g){
(sqrt(N_1*N_2)*var_g*s1)/(1+N_1*var_g+N_1*c1)
}
#s1_sig$predLambda<-expected_mean_lambda(s1_sig$s1_dist, var_c1, var_g)
MLE_joint_probability<-function(var_g, var_c1, var_c2){
cov_matrix=matrix(data=NA, nrow=2, ncol=2)
cov_matrix[1,1]=N_1*var_g+N_1*var_c1+1
cov_matrix[1,2]=sqrt(N_1*N_2)*var_g
cov_matrix[2,1]=sqrt(N_1*N_2)*var_g
cov_matrix[2,2]=N_2*var_g+N_2*var_c2+1
mean_matrix=matrix(data=NA, nrow=2, ncol=1)
mean_matrix[1,1]=0
mean_matrix[2,1]=0
estimate<-choose(M,num_s1)
#vector<-(s1_sig %>% select(s1_dist, s2_dist))
vector<-(s1_sig[,c(2,3)])
prob<-dmvnorm(x=vector, mean = mean_matrix, sigma = cov_matrix, log = FALSE)
for(i in prob){
estimate<-estimate*i
}
estimate*pnorm(zscore1, mean=0, sd=sqrt(var_g))^(M-num_s1)
}
max<-0
c2_est<-0
for(i in seq(from=0,to=10, by=0.001)){
temp<-MLE_joint_probability(var_g, var_c1, i)
if(temp>max){
max<-temp
c2_est<-i
}
}
calculate_pcondtional<-function(s1,var_s1,var_cur,val){
mean<-var_cur/var_s1*s1
var<-var_cur-(var_cur^2)/(var_s1)
p<-dnorm(val,mean,sqrt(var))
return (p)
}
#account already that g+c+e=s1
MLE_gce<-function(g,c,s1){
g_prob<-100*calculate_pcondtional(s1,N_1*var_g_est2+N_1*c1_est2+1,N_1*var_g_est2,g)
c_prob<-100*calculate_pcondtional(s1,N_1*var_g_est2+N_1*c1_est2+1,N_1*c1_est2,c)
e_prob<-100*calculate_pcondtional(s1,N_1*var_g_est2+N_1*c1_est2+1,1,s1-c-g)
return (g_prob*c_prob*e_prob)
}
g_estimates <- rep(1,length(s1_sig$s1_dist))
c_estimates <- rep(1,length(s1_sig$s1_dist))
e_estimates <- rep(1,length(s1_sig$s1_dist))
for(i in 1:length(s1_sig$s1_dist)){
s1<-s1_sig$s1_dist[i]
max_prob <- 0
max_g<- 0
max_c<- 0
for(g in seq(from=(-abs(s1)*2),to=(abs(s1)*2), by=0.01)){
for(c in seq(from=(-abs(s1)*2),to=(abs(s1)*2), by=0.01)){
cur_prob <- MLE_gce(g,c,s1)
if(cur_prob>max_prob){
max_prob<-cur_prob
max_g<-g
max_c<-c
}
}
}
cat(max_g)
cat(max_c)
cat(max_prob)
cat("\n")
g_estimates[i]<-max_g
c_estimates[i]<-max_c
e_estimates[i]<-s1-max_g-max_c
}
proportion_1<-s1_sig
proportion_1$lambda_est<-g_estimates
proportion_1$delta_est<-c_estimates
proportion_1$env_est<-e_estimates
proportion_1$lambda<-proportion_1$lambda*sqrt(N_1)
View(proportion_1)
proportion_1<-s1_sig
proportion_1$lambda_est<-g_estimates
proportion_1$delta_est<-c_estimates
proportion_1$env_est<-e_estimates
proportion_1$lambda<-proportion_1$lambda*sqrt(N_1)
View(proportion_1)
View(proportion_1)
proportion_1$env<-proportion_1$s1_dist-proportion_1$lambda
View(proportion_1)
View(proportion_1)
proportion_1<-proportion[,c(2,1,6,3,7,9,8)]
proportion_1<-proportion_1[,c(2,1,6,3,7,9,8)]
View(proportion_1)
proportion_1$env<-proportion_1$s1_dist-proportion_1$lambda-proportion_1$delta1
View(proportion_1)
#reading in libraries
library(tidyverse)
# library(MASS)
library(ggplot2)
# library(dplyr)
# library(plyr)
# library(reshape2)
library(dplyr)
#reading in libraries
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
filename<-"output2.txt"
data<-read.csv(filename, sep=" ")
#data<-data[, c(-9)]
data<-na.omit(data)
# data$pred_c<-as.character(data$pred_c)
# data$pred_c<-as.numeric(data$pred_c)
data[2:11] <- lapply(data[2:11], as.numeric)
data$pred_c<-format(round(data$pred_c, 2), nsmall = 2)
data[2:11] <- lapply(data[2:11], as.numeric)
View(data)
ggplot(data = data, mapping=aes(x=pred_c,y=obs))+geom_point()
ggplot(data = data, mapping=aes(x=pred_wc,y=obs))+geom_point()
ggplot(data = data, mapping=aes(x=pred_c,y=obs))+geom_point()
ggplot(data = data, mapping=aes(x=pred_c,y=obs))+geom_point()+
xlab("predicted rep count with confounding and winners curse")+
ylab("observed rep count")
ggplot(data = data, mapping=aes(x=pred_c,y=obs))+geom_point()+
xlab("Predicted rep count with confounding and winners curse")+
ylab("Observed rep count")
ggplot(data = data, mapping=aes(x=pred_wc,y=obs))+geom_point()+
xlab("Predicted rep count with winners curse")+
ylab("Observed rep count")
filename<-"output2_high.txt"
data<-read.csv(filename, sep=" ")
#data<-data[, c(-9)]
data<-na.omit(data)
# data$pred_c<-as.character(data$pred_c)
# data$pred_c<-as.numeric(data$pred_c)
data[2:11] <- lapply(data[2:11], as.numeric)
data$pred_c<-format(round(data$pred_c, 2), nsmall = 2)
data[2:11] <- lapply(data[2:11], as.numeric)
data<-read.csv(filename, sep=" ")
data<-na.omit(data)
data<-read.csv(filename, sep=" ")
View(data)
data[2:11] <- lapply(data[2:11], as.numeric)
View(data)
filename<-"output2_high.txt"
View(data)
filename<-"output2_high.txt"
data<-read.csv(filename, sep=" ")
View(data)
filename<-"output2_high.txt"
data<-read.csv(filename, sep=" ")
View(data)
filename<-"output2_high.txt"
data<-read.csv(filename, sep=" ")
View(data)
