lamda<-rnorm(n=M, mean=0, sd=sqrt(var))
s1_dist<-matrix(nrow=M, ncol=1)
for(i in 1:M){
s1_dist[i]<-rnorm(n=1,mean=lamda[i]*sqrt(sampleS1),sd=1)
}
return(s1_dist)
}
s1_dist1<-p_s1(var1, N_1)
s1_dist2<-p_s1(var2, N_1)
s1_dist3<-p_s1(var3, N_1)
table<-as.data.frame(matrix(nrow=M, ncol=3))
colnames(table)=c("var1", "var2", "var2")
table$var1<-as.vector(s1_dist1)
table$var2<-as.vector(s1_dist2)
table$var3<-as.vector(s1_dist3)
View(table)
View(table)
#predicting whether s2 replicates given s1. Different Sample Size
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#simulating data
sigma<-sqrt(2)
N=1000000
N_1=1
#N_1=10000
z_score=5.2
#probability of s2 replicating given s1
# calculate_pcondtional<-function(s1,sampleS1, sampleS2){
#   sd_S1<-sqrt(sampleS1*sigma^2+1)
#   sd_S2<-sqrt(sampleS2*sigma^2+1)
#   mean<-(sqrt(sampleS1*sampleS2)*sigma^2*s1)/(sd_S1^2)
#   var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
#   p<- (1-pnorm(zScore, mean, sqrt(var2)))+pnorm(-zScore, mean, sqrt(var2))
#   return(p)
# }
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
lamda <- rnorm(n=N, mean=0, sd=sigma)
s1_dist<-matrix(nrow=N, ncol=1)
s2_dist1<-matrix(nrow=N, ncol=1)
s2_dist2<-matrix(nrow=N, ncol=1)
s2_dist3<-matrix(nrow=N, ncol=1)
s2_dist4<-matrix(nrow=N, ncol=1)
for (i in 1:N){
s1_dist[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist1[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1*0.5),sd=1)
s2_dist2[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist3[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1*2),sd=1)
s2_dist4[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1*5),sd=1)
}
table1<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table1)=c("N1", "N2", "S1", "Ps2")
table1$N1<-rep(N_1, N)
table1$N2<-rep(N_1*0.5, N)
table1$S1<-as.vector(s1_dist)
table1$Ps2<-calculate_pcondtional(table1$S1, N_1, table1$N2[1])
#actual replication rate table1
table1$S2<-as.vector(s2_dist1)
s1_sig<-nrow(filter(table1, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table1, S1>5.2), S2>5.2)) + nrow(filter(filter(table1, S1<(-5.2)), S2<(-5.2)))
repRate=s2_s1_sig/N
#theoretical
s1_sig_vector <-filter(table1, S1>5.2|S1<(-5.2))$S1
theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector,sampleS1 = N_1, sampleS2 = N_1*0.5))/N
table2<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table2)=c("N1", "N2", "S1", "Ps2")
table2$N1<-rep(N_1, N)
table2$N2<-rep(N_1, N)
table2$S1<-as.vector(s1_dist)
table2$Ps2<-calculate_pcondtional(table2$S1, N_1, table2$N2[1])
#actual replication rate table2
table2$S2<-as.vector(s2_dist2)
s1_sig<-nrow(filter(table2, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table2, S1>5.2), S2>5.2)) + nrow(filter(filter(table2, S1<(-5.2)), S2<(-5.2)))
repRate=s2_s1_sig/N
#theoretical
s1_sig_vector <-filter(table2, S1>5.2|S1<(-5.2))$S1
theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector,sampleS1 = N_1, sampleS2 = N_1))/N
table3<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table3)=c("N1", "N2", "S1", "Ps2")
table3$N1<-rep(N_1, N)
table3$N2<-rep(N_1*2, N)
table3$S1<-as.vector(s1_dist)
table3$Ps2<-calculate_pcondtional(table3$S1, N_1, table3$N2[1])
#actual replication rate table3
table3$S2<-as.vector(s2_dist3)
s1_sig<-nrow(filter(table3, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table3, S1>5.2), S2>5.2)) + nrow(filter(filter(table3, S1<(-5.2)), S2<(-5.2)))
repRate=s2_s1_sig/N
#theoretical
s1_sig_vector <-filter(table3, S1>5.2|S1<(-5.2))$S1
theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector,sampleS1 = N_1, sampleS2 = N_1*2))/N
table4<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table4)=c("N1", "N2", "S1", "Ps2")
table4$N1<-rep(N_1, N)
table4$N2<-rep(N_1*5, N)
table4$S1<-s1_dist
table4$Ps2<-calculate_pcondtional(table4$S1, N_1, table4$N2[1])
#plotting probabilities
probabilties_conditional<-ggplot(data=filter(table2, S1>0 & S1<100), mapping = aes(x=S1))+
stat_function(fun=calculate_pcondtional, args=list(sampleS1=N_1, sampleS2=N_1))
probabilties_conditional<-ggplot(data=filter(table3, S1>0 & S1<100), mapping = aes(x=S1))+
stat_function(fun=calculate_pcondtional, args=list(sampleS1=N_1, sampleS2=N_1*2))
probabilties_conditional
probabilties_conditional<-ggplot(data.frame(x = c(-8, 8)), aes(x))+
stat_function(mapping = aes(table$var1),fun=calculate_pcondtional, args=list(sampleS1=N_1, sampleS2=N_1))
#predicting whether s2 replicates given s1. Different Sample Size
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#simulating data
M=1000000
N_1=2000
N_2=1000
z_score=5.2
var1<-2
var2<-10
var3<-100
calculate_pcondtional<-function(s1,sampleS1, sampleS2, var){
sigma<-sqrt(var)
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
table<-as.data.frame(matrix(nrow=M, ncol=3))
colnames(table)=c("var1", "var2", "var2")
table$var1<-as.vector(s1_dist1)
table$var2<-as.vector(s1_dist2)
table$var3<-as.vector(s1_dist3)
probabilties_conditional<-ggplot(data.frame(x = c(-8, 8)), aes(x))+
stat_function(mapping = aes(table$var1),fun=calculate_pcondtional, args=list(sampleS1=N_1, sampleS2=N_1))
#predicting whether s2 replicates given s1. Different Sample Size
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#simulating data
M=1000000
N_1=2000
N_2=1000
z_score=5.2
var1<-2
var2<-10
var3<-100
calculate_pcondtional<-function(s1,sampleS1, sampleS2, var){
sigma<-sqrt(var)
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
probabilties_conditional<-ggplot(data.frame(x = c(-8, 8)), aes(x))+
stat_function(mapping = aes(table$var1),fun=calculate_pcondtional, args=list(sampleS1=N_1, sampleS2=N_1))
probabilties_conditional
M=1000000
N_1=2000
N_2=1000
z_score=5.2
var1<-2
var2<-10
var3<-100
calculate_pcondtional<-function(s1,sampleS1, sampleS2, var){
sigma<-sqrt(var)
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
probabilties_conditional<-ggplot(data.frame(x = c(-8, 8)), aes(x))+
stat_function(fun=calculate_pcondtional, args=list(sampleS1=N_1, sampleS2=N_1))
probabilties_conditional
probabilties_conditional<-ggplot(data.frame(x = c(-8, 8)), aes(x))+
stat_function(fun=calculate_pcondtional, args=list(var=var1, sampleS1=N_1, sampleS2=N_1))
probabilties_conditional
probabilties_conditional<-ggplot(data.frame(s1 = c(-8, 8)), aes(s1))+
stat_function(fun=calculate_pcondtional, args=list(var=var1, sampleS1=N_1, sampleS2=N_1))
probabilties_conditional
probabilties_conditional<-ggplot(data.frame(s1 = c(-8, 8)), aes(s1))+
stat_function(fun=calculate_pcondtional, args=list(var=var1, sampleS1=N_1, sampleS2=N_1), aes(colour="var1"))+
stat_function(fun=calculate_pcondtional, args=list(var=var2, sampleS1=N_1, sampleS2=N_1), aes(colour="var2"))+
stat_function(fun=calculate_pcondtional, args=list(var=var3, sampleS1=N_1, sampleS2=N_1), aes(colour="var3"))
probabilties_conditional
var1<-2
var2<-100
var3<-1000
probabilties_conditional<-ggplot(data.frame(s1 = c(-8, 8)), aes(s1))+
stat_function(fun=calculate_pcondtional, args=list(var=var1, sampleS1=N_1, sampleS2=N_1), aes(colour="var1"))+
stat_function(fun=calculate_pcondtional, args=list(var=var2, sampleS1=N_1, sampleS2=N_1), aes(colour="var2"))+
stat_function(fun=calculate_pcondtional, args=list(var=var3, sampleS1=N_1, sampleS2=N_1), aes(colour="var3"))
probabilties_conditional
probabilties_conditional<-ggplot(data.frame(s1 = c(-8, 8)), aes(s1))+
stat_function(fun=calculate_pcondtional, args=list(var=var1, sampleS1=N_1, sampleS2=N_1*0.5), aes(colour="var1"))+
stat_function(fun=calculate_pcondtional, args=list(var=var2, sampleS1=N_1, sampleS2=N_1*0.5), aes(colour="var2"))+
stat_function(fun=calculate_pcondtional, args=list(var=var3, sampleS1=N_1, sampleS2=N_1*0.5), aes(colour="var3"))
probabilties_conditional
calculate_pcondtional<-function(s1,sampleS1, sampleS2, var){
sigma<-sqrt(var)
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var_temp<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
probabilties_conditional<-ggplot(data.frame(s1 = c(-8, 8)), aes(s1))+
stat_function(fun=calculate_pcondtional, args=list(var=var1, sampleS1=N_1, sampleS2=N_1*0.5), aes(colour="var1"))+
stat_function(fun=calculate_pcondtional, args=list(var=var2, sampleS1=N_1, sampleS2=N_1*0.5), aes(colour="var2"))+
stat_function(fun=calculate_pcondtional, args=list(var=var3, sampleS1=N_1, sampleS2=N_1*0.5), aes(colour="var3"))
probabilties_conditional
calculate_pcondtional<-function(s1,sampleS1, sampleS2, var){
sigma<-sqrt(var)
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var_temp<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var_temp)))
}
else{
p[i]<-pnorm(-z_score, mean[i], sqrt(var_temp))
}
}
return(p)
}
probabilties_conditional<-ggplot(data.frame(s1 = c(-8, 8)), aes(s1))+
stat_function(fun=calculate_pcondtional, args=list(var=var1, sampleS1=N_1, sampleS2=N_1*0.5), aes(colour="var1"))+
stat_function(fun=calculate_pcondtional, args=list(var=var2, sampleS1=N_1, sampleS2=N_1*0.5), aes(colour="var2"))+
stat_function(fun=calculate_pcondtional, args=list(var=var3, sampleS1=N_1, sampleS2=N_1*0.5), aes(colour="var3"))
probabilties_conditional
calculate_pcondtional(3.3,1,0.5,100)
calculate_pcondtional(3.3,1,0.5,10)
calculate_pcondtional(3.3,1,0.5,1)
calculate_pcondtional(5,1,0.5,1)
calculate_pcondtional(5,1,0.5,10)
calculate_pcondtional(5,1,0.5,100)
calculate_pcondtional(8,1,0.5,100)
calculate_pcondtional(8,1,0.5,10)
calculate_pcondtional(8,1,0.5,1)
probabilties_conditional<-ggplot(data.frame(s1 = c(-8, 8)), aes(s1))+stat_function(fun=calculate_pcondtional, args=list(var=var1, sampleS1=N_1, sampleS2=N_1*0.5), aes(colour="var1"))+
stat_function(fun=calculate_pcondtional, args=list(var=var2, sampleS1=N_1, sampleS2=N_1*0.5), aes(colour="var2"))+
stat_function(fun=calculate_pcondtional, args=list(var=var3, sampleS1=N_1, sampleS2=N_1*0.5), aes(colour="var3"))
probabilties_conditional
calculate_pcondtional(5,2000,1000,2)
calculate_pcondtional(8,2000,1000,2)
calculate_pcondtional(8,2000,1000,100)
calculate_pcondtional(8,2000,1000,1000)
#reading in data
filename<-"1_22504420_data_upbuilt_filtered_upbuilt.csv"
data<-read.csv(filename, sep=" ")
z_score <- qnorm(0.025,lower.tail =FALSE)
#needed functions and math
M=nrow(data)
var=data$trait.var[1]
#sampleSize
sigma=sqrt(var)
threshold=data$p.thresh[1]
sampleSizeS1=data$n.disc/data$n.disc
sampleSizeS2=data$n.rep/data$n.disc
#calculating averages for scaling
averages1=mean(data$n.disc)
averages2=mean(data$n.rep)
#find test statsitic with scaling
results.data<-data.frame(data$beta.disc, data$se.disc)
results.data$s1<-((data$beta.disc)/(data$se.disc))*(sqrt(averages2))
results.data$s2<-((data$beta.rep)/(data$se.rep))*(sqrt(averages1))*
act_var<-(var((results.data$s1)-(results.data$s2)))/(sqrt(averages2+averages1))
#eskins way
#reading in data
filename<-"25035420_data_upbuilt_filtered_upbuilt.csv"
data<-read.csv(filename, sep=" ")
z_score <- qnorm(0.025,lower.tail =FALSE)
#needed functions and math
M=nrow(data)
var=data$trait.var[1]
#sampleSize
sigma=sqrt(var)
threshold=data$p.thresh[1]
sampleSizeS1=data$n.disc/data$n.disc
sampleSizeS2=data$n.rep/data$n.disc
setwd("~/Documents/Big summer/repProjColab/predicting real data/files")
#reading in data
filename<-"1_22504420_data_upbuilt_filtered_upbuilt.csv"
data<-read.csv(filename, sep=" ")
z_score <- qnorm(0.025,lower.tail =FALSE)
M=nrow(data)
var=data$trait.var[1]
z_score <- qnorm(0.025,lower.tail =FALSE)
M=nrow(data)
var=data$trait.var[1]
sigma=sqrt(var)
threshold=data$p.thresh[1]
filename<-"1_22504420_data_upbuilt_filtered_upbuilt.csv"
data<-read.csv(filename, sep=" ")
View(data)
View(data)
filename<-"1_22504420_data_upbuilt_filtered_upbuilt.csv"
data<-read.csv(filename, sep=",")
z_score <- qnorm(0.025,lower.tail =FALSE)
M=nrow(data)
var=data$trait.var[1]
sigma=sqrt(var)
threshold=data$p.thresh[1]
sampleSizeS1=data$n.disc/data$n.disc
sampleSizeS2=data$n.rep/data$n.disc
#calculating averages for scaling
averages1=mean(data$n.disc)
averages2=mean(data$n.rep)
#find test statsitic with scaling
results.data<-data.frame(data$beta.disc, data$se.disc)
results.data$s1<-((data$beta.disc)/(data$se.disc))*(sqrt(averages2))
results.data$s2<-((data$beta.rep)/(data$se.rep))*(sqrt(averages1))*
act_var<-(var((results.data$s1)-(results.data$s2)))/(sqrt(averages2+averages1))
results.data<-data.frame(data$beta.disc, data$se.disc)
results.data<-data.frame(data$beta.disc, data$se.disc)
#reading in data
filename<-"1_24952745_data_upbuilt_filtered_upbuilt.csv"
data<-read.csv(filename, sep=",")
z_score <- qnorm(0.025,lower.tail =FALSE)
M=nrow(data)
var=data$trait.var[1]
sigma=sqrt(var)
threshold=data$p.thresh[1]
sampleSizeS1=data$n.disc/data$n.disc
sampleSizeS2=data$n.rep/data$n.disc
#calculating averages for scaling
averages1=mean(data$n.disc)
averages2=mean(data$n.rep)
results.data<-data.frame(data$beta.disc, data$se.disc)
results.data$s1<-((data$beta.disc)/(data$se.disc))*(sqrt(averages2))
results.data$s2<-((data$beta.rep)/(data$se.rep))*(sqrt(averages1))*
act_var<-(var((results.data$s1)-(results.data$s2)))/(sqrt(averages2+averages1))
act_var<-(var(results.data$s1)-var(results.data$s2))
View(results.data)
View(results.data)
results.data$s2<-((data$beta.rep)/(data$se.rep))*(sqrt(averages1))
act_var<-(var(results.data$s1)-var(results.data$s2))
act_var<-(var(results.data$s1)-var(results.data$s2))/(sqrt(averages2+averages1)
3
act_var<-(var(results.data$s1)-var(results.data$s2))
act_var<-act_var/(sqrt(averages2+averages1))
act_var<-var(results.data$s1-results.data$s2)
act_var<-act_var/(sqrt(averages2+averages1))
act_var<-var((results.data$s1-results.data$s2)/(sqrt(averages2+averages1))
act_var<-var((results.data$s1-results.data$s2)/(sqrt(averages2+averages1))*30
act_var<-var((results.data$s1-results.data$s2)/(sqrt(averages2+averages1))
#find test statsitic with scaling
results.data<-data.frame(data$beta.disc, data$se.disc)
results.data$s1<-((data$beta.disc)/(data$se.disc))*(sqrt(averages2))
results.data$s2<-((data$beta.rep)/(data$se.rep))*(sqrt(averages1))
new<-results.data$s1-results.data$s2
temp<-results.data$s1+results.data$s1
new<-results.data$s1-results.data$s2
temp<-results.data$s1+results.data$s1
temp<-sqrt(temp)
temp<-results.data$s1-results.data$s2
temp<-temp/(sqrt(average1+average2))
temp<-temp/(sqrt(averages1+averages2))
act_var<-var(temp)
filename<-"1_24952745_data_upbuilt_filtered_upbuilt.csv"
data<-read.csv(filename, sep=" ")
#find test statsitic
results.data<-data.frame(data$beta.disc, data$se.disc)
results.data$s1<-(data$beta.disc)/(data$se.disc)
results.data$s2<-(data$beta.rep)/(data$se.rep)
checkingDist<-ggplot(data = filter(results.data), mapping = aes(x = s1, y = s2)) +
geom_point()+
scale_y_continuous(breaks=seq(-8, 8, 1), limits=c(-8,8))+scale_x_continuous(breaks=seq(-8, 8, 1), limits=c(-8, 8))
checkingDist
z_score <- qnorm(0.025,lower.tail =FALSE)
#needed functions and math
M=nrow(data)
var=data$trait.var[1]
#sampleSize
sigma=sqrt(var)
threshold=data$p.thresh[1]
# sampleSizeS1=data$n.disc
# sampleSizeS2=data$n.rep
sampleSizeS1=1*scalingFactor
sampleSizeS2=(mean(data$n.rep)/mean(data$n.disc))*scalingFactor
results.data$actual_rep = rep(0,M)
for (i in 1:M){
if (results.data$s2[i]>z_score | results.data$s2[i]<(-z_score))
results.data$actual_rep[i] = 1
}
#calculating condtional with different sample sizes.
#this one is assuming same sample size
# calculate_pcondtional<-function(s1){
#   mean<-(sigma^2*s1)/(1+sigma^2)
#   var2=1+((sigma^2)/(1+sigma^2))
#   p<- (1-pnorm(zScore, mean, sqrt(var2)))+pnorm(-zScore, mean, sqrt(var2))
#   return(p)
# }
#probability of s2 replicating given s1
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1)*sqrt(sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p <- s1
for (i in 1:NROW(s1)){
if (s1[i]>0){
#p[i]<-(1-mean(pnorm(z_score, mean[i], sqrt(var2))))
p[i]<-(1-pnorm(z_score, mean[i], sqrt(var2)))
}
else{
# p[i]<-mean(pnorm(-z_score, mean[i], sqrt(var2)))
p[i]<-pnorm(-z_score, mean[i], sqrt(var2))
}
}
return(p)
}
#observed replication rate
# s1_sig<-nrow(filter(results.data, s1>zScore|s1<(-zScore)))
# s2_sig_givens1<-nrow(filter(filter(results.data, s1>zScore), s2>zScore)) + nrow(filter(filter(results.data, s1<(-zScore)), s2<(-zScore)))
# repRate=s2_sig_givens1/nrow(results.data)
#observed rep count
obs_rep_cnt <- sum(results.data$actual_rep)
#theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector, sampleSizeS1, sampleSizeS2))/N
# theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector,sampleSizeS1, sampleSizeS2))/N
results.data$pred_prob = calculate_pcondtional(results.data$s1,sampleSizeS1, sampleSizeS2)
prd_rep_cnt <- sum(calculate_pcondtional(results.data$s1,sampleSizeS1, sampleSizeS2))
?cat
#reading in data
filename<-"1_22267201_data_upbuilt_filtered_upbuilt.csv"
data<-read.csv(filename, sep=",")
z_score <- qnorm(0.025,lower.tail =FALSE)
M=nrow(data)
var=data$trait.var[1]
sigma=sqrt(var)
threshold=data$p.thresh[1]
#calculating averages for scaling
averages1=mean(data$n.disc)
averages2=mean(data$n.rep)
#find test statsitic with scaling
results.data<-data.frame(data$beta.disc, data$se.disc)
results.data$s1<-((data$beta.disc)/(data$se.disc))*(sqrt(averages2))
results.data$s2<-((data$beta.rep)/(data$se.rep))*(sqrt(averages1))
temp<-results.data$s1-results.data$s2
temp<-temp/(sqrt(averages1+averages2))
act_var<-var(temp)
#act_var<-act_var/(sqrt(averages2+averages1))
#eskins way
split
methods(split)
library(split)
split
UseMethod(split)
useMethod("split")
