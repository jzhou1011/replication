s2_dist4<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*5+1))
table1$S2<-s2_dist1<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*0.5+1))
s1_sig<-nrow(filter(table1, S1>5.2|S1<(-5.2)))
s2_sig_givens1<-nrow(filter(filter(table1, S1>5.2), S2>5.2)) + nrow(filter(filter(table1, S1<(-5.2)), S2<(-5.2)))
repRate=s2_sig_givens1/s1_sig
View(table1)
sigma<-sqrt(2)
sigma<-sqrt(2)
N=10000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=sigma)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
sigma<-sqrt(2)
N=100000
N_1=1
#N_1=10000
zScore=5.2
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1*sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p<- (1-pnorm(zScore, mean, sqrt(var2)))+pnorm(-zScore, mean, sqrt(var2))
return(p)
}
s1_dist<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1+1))
s2_dist1<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*0.5+1))
s2_dist2<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*1+1))
s2_dist3<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*2+1))
s2_dist4<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*5+1))
table1<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table1)=c("N1", "N2", "S1", "Ps2")
table1$N1<-rep(N_1, N)
table1$N2<-rep(N_1*0.5, N)
table1$S1<-s1_dist
table1$Ps2<-calculate_pcondtional(table1$S1, N_1, table1$N2[1])
View(table1)
lamda <- rnorm(n=N, mean=0, sd=sigma)
#to check if the lamda drawn is normally ditrbuted
#den_init_lambda <- density(lamda)
#plot(den_init_lambda)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
View(results)
View(table1)
sigma<-sqrt(2)
N=1000000
N_1=1
#N_1=10000
zScore=5.2
#probability of s2 replicating given s1
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1*sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p<- (1-pnorm(zScore, mean, sqrt(var2)))+pnorm(-zScore, mean, sqrt(var2))
return(p)
}
s1_dist<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1+1))
s2_dist1<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*0.5+1))
s2_dist2<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*1+1))
s2_dist3<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*2+1))
s2_dist4<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*5+1))
table1<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table1)=c("N1", "N2", "S1", "Ps2")
table1$N1<-rep(N_1, N)
table1$N2<-rep(N_1*0.5, N)
table1$S1<-s1_dist
table1$Ps2<-calculate_pcondtional(table1$S1, N_1, table1$N2[1])
table1$S2<-s2_dist1<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*0.5+1))
s1_sig<-nrow(filter(table1, S1>5.2|S1<(-5.2)))
s2_sig_givens1<-nrow(filter(filter(table1, S1>5.2), S2>5.2)) + nrow(filter(filter(table1, S1<(-5.2)), S2<(-5.2)))
repRate=s2_sig_givens1/s1_sig
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
s1_sig<-nrow(filter(results.data, s1>5.2|s1<(-5.2)))
View(results.data)
sigma<-sqrt(2)
N=1000000
lamda <- rnorm(n=N, mean=0, sd=sigma)
#to check if the lamda drawn is normally ditrbuted
#den_init_lambda <- density(lamda)
#plot(den_init_lambda)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
sigma<-sqrt(2)
N=1000000
N_1=1
#N_1=10000
zScore=5.2
s1_dist<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1+1))
s2_dist1<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*0.5+1))
s2_dist2<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*1+1))
s2_dist3<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*2+1))
s2_dist4<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*5+1))
table1<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table1)=c("N1", "N2", "S1", "Ps2")
table1$N1<-rep(N_1, N)
table1$N2<-rep(N_1*0.5, N)
table1$S1<-s1_dist
table1$Ps2<-calculate_pcondtional(table1$S1, N_1, table1$N2[1])
View(table1)
table2$S2<-s2_dist1<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1+1))
table2<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table2)=c("N1", "N2", "S1", "Ps2")
table2$N1<-rep(N_1, N)
table2$N2<-rep(N_1, N)
table2$S1<-s1_dist
table2$Ps2<-calculate_pcondtional(table2$S1, N_1, table2$N2[1])
table2$S2<-s2_dist1<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1+1))
s1_sig<-nrow(filter(table2, S1>5.2|S1<(-5.2)))
s2_sig_givens1<-nrow(filter(filter(table2, S1>5.2), S2>5.2)) + nrow(filter(filter(table2, S1<(-5.2)), S2<(-5.2)))
repRate=s2_sig_givens1/s1_sig
repRate=s2_sig_givens1/N
s1_sig_vector <-filter(table2, S1>5.2|S1<(-5.2))$S1
theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector,sampleS1 = N_1, sampleS2 = N_1))/N
table2$S2<-s2_dist1<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1+1))
s1_sig<-nrow(filter(table2, S1>5.2|S1<(-5.2)))
s2_sig_givens1<-nrow(filter(filter(table2, S1>5.2), S2>5.2)) + nrow(filter(filter(table2, S1<(-5.2)), S2<(-5.2)))
repRate=s2_sig_givens1/N
table2$S2<-s2_dist1<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1+1))
s1_sig<-nrow(filter(table2, S1>5.2|S1<(-5.2)))
s2_sig_givens1<-nrow(filter(filter(table2, S1>5.2), S2>5.2)) + nrow(filter(filter(table2, S1<(-5.2)), S2<(-5.2)))
repRate=s2_sig_givens1/N
s1_sig_vector <-filter(table2, S1>5.2|S1<(-5.2))$S1
theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector,sampleS1 = N_1, sampleS2 = N_1))/N
var(results.data$s2)
var(table2$S2)
mean(table2$S2)
View(table2)
mean(results.data$s2)
var(table2$S2)
mean(table2$S2)
s2_sig_givens1<-nrow(filter(filter(table2, S1>5.2), S2>5.2)) + nrow(filter(filter(table2, S1<(-5.2)), S2<(-5.2)))
nrow(filter(filter(table2, S1>5.2), S2>5.2))
nrow(filter(filter(table2, S1<(-5.2)), S2<(-5.2)))
nrow(filter(filter(results.data, s1>5.2), s2>5.2))
nrow(filter(filter(results.data, s1<(-5.2)), s2<(-5.2)))
sigma<-sqrt(2)
N=1000000
N_1=1
#N_1=10000
zScore=5.2
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1*sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p<- (1-pnorm(zScore, mean, sqrt(var2)))+pnorm(-zScore, mean, sqrt(var2))
return(p)
}
s1_dist<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1+1))
table1<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table1)=c("N1", "N2", "S1", "Ps2")
table2<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table2)=c("N1", "N2", "S1", "Ps2")
table2$N1<-rep(N_1, N)
table2$N2<-rep(N_1, N)
table2$S1<-s1_dist
table2$Ps2<-calculate_pcondtional(table2$S1, N_1, table2$N2[1])
table2$S2<-s2_dist1<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1+1))
s1_sig<-nrow(filter(table2, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table2, S1>5.2), S2>5.2)) + nrow(filter(filter(table2, S1<(-5.2)), S2<(-5.2)))
repRate=s2_sig_givens1/N
repRate=s2_s1_sig/N
var(table2$S2)
mean(table2$S2)
lamda <- rnorm(n=N, mean=0, sd=sigma)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
var(results.data$s2)
mean(results.data$s2)
s2_sig_givens1<-nrow(filter(filter(results.data, s1>5.2), s2>5.2)) + nrow(filter(filter(results.data, s1<(-5.2)), s2<(-5.2)))
s1_sig<-nrow(filter(results.data, s1>5.2|s1<(-5.2)))
table2$S2<-s2_dist2<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1+1))
var(table2$S2)
table2$S2<-s2_dist2
var(table2$S2)
mean(table2$S2)
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
sigma<-sqrt(2)
N=1000000
N_1=1
#N_1=10000
zScore=5.2
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1*sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p<- (1-pnorm(zScore, mean, sqrt(var2)))+pnorm(-zScore, mean, sqrt(var2))
return(p)
}
s1_dist<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1+1))
s2_dist1<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*0.5+1))
s2_dist2<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*1+1))
s2_dist3<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*2+1))
s2_dist4<-rnorm(n=N, mean=0, sd=sqrt(sigma^2*N_1*5+1))
table1<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table1)=c("N1", "N2", "S1", "Ps2")
table1$N1<-rep(N_1, N)
table1$N2<-rep(N_1*0.5, N)
table1$S1<-s1_dist
table1$Ps2<-calculate_pcondtional(table1$S1, N_1, table1$N2[1])
table2<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table2)=c("N1", "N2", "S1", "Ps2")
table2$N1<-rep(N_1, N)
table2$N2<-rep(N_1, N)
table2$S1<-s1_dist
table2$Ps2<-calculate_pcondtional(table2$S1, N_1, table2$N2[1])
table2$S2<-s2_dist2
s1_sig<-nrow(filter(table2, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table2, S1>5.2), S2>5.2)) + nrow(filter(filter(table2, S1<(-5.2)), S2<(-5.2)))
repRate=s2_s1_sig/N
var(table2$S2)
mean(table2$S2)
var(results.data$s2)
mean(results.data$s2)
View(table2)
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
#simulating data
sigma<-sqrt(2)
N=1000000
N_1=1
#N_1=10000
zScore=5.2
#probability of s2 replicating given s1
calculate_pcondtional<-function(s1,sampleS1, sampleS2){
sd_S1<-sqrt(sampleS1*sigma^2+1)
sd_S2<-sqrt(sampleS2*sigma^2+1)
mean<-(sqrt(sampleS1*sampleS2)*sigma^2*s1)/(sd_S1^2)
var2<-1+((sampleS2*sigma^2)/(sd_S1)^2)
p<- (1-pnorm(zScore, mean, sqrt(var2)))+pnorm(-zScore, mean, sqrt(var2))
return(p)
}
lamda <- rnorm(n=N, mean=0, sd=sigma)
s1_dist<-matrix(nrow=N, ncol=1)
s2_dist1<-matrix(nrow=N, ncol=1)
s2_dist2<-matrix(nrow=N, ncol=1)
s2_dist3<-matrix(nrow=N, ncol=1)
s2_dist4<-matrix(nrow=N, ncol=1)
for (i in 1:N){
s1_dist<-rnorm(n=2,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist1<-rnorm(n=2,mean=lamda[i]*sqrt(N_1*0.5),sd=1)
s2_dist2<-rnorm(n=2,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist3<-rnorm(n=2,mean=lamda[i]*sqrt(N_1*2),sd=1)
s2_dist4<-rnorm(n=2,mean=lamda[i]*sqrt(N_1*5),sd=1)
}
table2<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table2)=c("N1", "N2", "S1", "Ps2")
table2$N1<-rep(N_1, N)
table2$N2<-rep(N_1, N)
table2$S1<-s1_dist
table2$Ps2<-calculate_pcondtional(table2$S1, N_1, table2$N2[1])
table2$S2<-s2_dist2
s1_sig<-nrow(filter(table2, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table2, S1>5.2), S2>5.2)) + nrow(filter(filter(table2, S1<(-5.2)), S2<(-5.2)))
repRate=s2_s1_sig/N
View(table2)
var(table2$S2)
mean(table2$S2)
lamda <- rnorm(n=N, mean=0, sd=sigma)
mean(lamda)
var(lambda)
var(lamda)
s1_dist<-matrix(nrow=N, ncol=1)
s2_dist1<-matrix(nrow=N, ncol=1)
s2_dist2<-matrix(nrow=N, ncol=1)
s2_dist3<-matrix(nrow=N, ncol=1)
s2_dist4<-matrix(nrow=N, ncol=1)
for (i in 1:N){
s1_dist[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist1[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1*0.5),sd=1)
s2_dist2[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1),sd=1)
s2_dist3[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1*2),sd=1)
s2_dist4[i]<-rnorm(n=1,mean=lamda[i]*sqrt(N_1*5),sd=1)
}
table2<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table2)=c("N1", "N2", "S1", "Ps2")
table2$N1<-rep(N_1, N)
table2$N2<-rep(N_1, N)
table2$S1<-s1_dist
table2$Ps2<-calculate_pcondtional(table2$S1, N_1, table2$N2[1])
table2$S2<-s2_dist2
s1_sig<-nrow(filter(table2, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table2, S1>5.2), S2>5.2)) + nrow(filter(filter(table2, S1<(-5.2)), S2<(-5.2)))
repRate=s2_s1_sig/N
View(table2)
table2$S2<-as.vector(s2_dist2)
table2<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table2)=c("N1", "N2", "S1", "Ps2")
table2$N1<-rep(N_1, N)
table2$N2<-rep(N_1, N)
table2$S1<-as.vector(s1_dist)
table2$S2<-as.vector(s2_dist2)
s1_sig<-nrow(filter(table2, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table2, S1>5.2), S2>5.2)) + nrow(filter(filter(table2, S1<(-5.2)), S2<(-5.2)))
repRate=s2_s1_sig/N
s1_sig_vector <-filter(table2, S1>5.2|S1<(-5.2))$S1
theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector,sampleS1 = N_1, sampleS2 = N_1))/N
table1<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table1)=c("N1", "N2", "S1", "Ps2")
table1$N1<-rep(N_1, N)
table1$N2<-rep(N_1*0.5, N)
table1$S1<-s1_dist
table1$Ps2<-calculate_pcondtional(table1$S1, N_1, table1$N2[1])
table1$S2<-as.vector(s2_dist1)
table1<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table1)=c("N1", "N2", "S1", "Ps2")
table1$N1<-rep(N_1, N)
table1$N2<-rep(N_1*0.5, N)
table1$S1<-s1_dist
table1$Ps2<-calculate_pcondtional(table1$S1, N_1, table1$N2[1])
table1$S2<-as.vector(s2_dist1)
s1_sig<-nrow(filter(table1, S1>5.2|S1<(-5.2)))
table1$S1<-as.vector(s1_dist)
table1$Ps2<-calculate_pcondtional(table1$S1, N_1, table1$N2[1])
View(table1)
table1$S2<-as.vector(s2_dist1)
s1_sig<-nrow(filter(table1, S1>5.2|S1<(-5.2)))
s2_sig_givens1<-nrow(filter(filter(table1, S1>5.2), S2>5.2)) + nrow(filter(filter(table1, S1<(-5.2)), S2<(-5.2)))
repRate=s2_sig_givens1/s1_sig
repRate=s2_sig_givens1/N
s2_s1_sig<-nrow(filter(filter(table1, S1>5.2), S2>5.2)) + nrow(filter(filter(table1, S1<(-5.2)), S2<(-5.2)))
s1_sig_vector <-filter(table1, S1>5.2|S1<(-5.2))$S1
theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector,sampleS1 = N_1, sampleS2 = N_1*0.5))/N
table3$S2<-as.vector(s2_dist3)
s1_sig<-nrow(filter(table3, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table3, S1>5.2), S2>5.2)) + nrow(filter(filter(table3, S1<(-5.2)), S2<(-5.2)))
repRate=s2_s1_sig/N
table3<-as.data.frame(matrix(nrow=N, ncol=4))
colnames(table3)=c("N1", "N2", "S1", "Ps2")
table3$N1<-rep(N_1, N)
table3$N2<-rep(N_1*2, N)
table3$S1<-as.vector(s1_dist)
table3$Ps2<-calculate_pcondtional(table3$S1, N_1, table3$N2[1])
table3$S2<-as.vector(s2_dist3)
s1_sig<-nrow(filter(table3, S1>5.2|S1<(-5.2)))
s2_s1_sig<-nrow(filter(filter(table3, S1>5.2), S2>5.2)) + nrow(filter(filter(table3, S1<(-5.2)), S2<(-5.2)))
repRate=s2_s1_sig/N
s1_sig_vector <-filter(table3, S1>5.2|S1<(-5.2))$S1
theo_rep2 <- sum(calculate_pcondtional(s1_sig_vector,sampleS1 = N_1, sampleS2 = N_1*2))/N
s2_s1_sig<-nrow(filter(filter(table3, S1>5.2), S2>5.2)) + nrow(filter(filter(table3, S1<(-5.2)), S2<(-5.2)))
sigma<-sqrt(2)
N=100000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=sigma)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
#calculating the variance of s1 to estimate sigma squared g
compute_var<-function(s1_v,mean){
sum<-0
for(s1 in s1_v){
sum<-(s1-mean)^2+sum
}
var<-sum/N
return(var)
}
compute_var(results.data$s1, mean(results.data$s1))
#confidence interval
#right now assuming 95% confidence interval
#Large degrree of freedom
var<-var(results.data$s1)
pred_sig_sq <- var-1
rnorm(var,sqrt(2*var()))
criticalValue=1.959964
chiSquaredUpper<-((criticalValue+sqrt(2*(N-1)-1))^2)/2
chiSquaredLower<-((-criticalValue+sqrt(2*(N-1)-1))^2)/2
compute_confidence<-function(var){
upperBound<-((N-1)*var)/chiSquaredLower
lowerBound<-((N-1)*var)/chiSquaredUpper
confidence<-c(lowerBound,upperBound)
return(confidence)
}
compute_confidence(compute_var(results.data$s1, mean(results.data$s1)))
#now using s1 and s2 to estimate
#distribution of the average (s1+s2)/2
#different when using our own function from using r function var
# var_avg <- 0.25*compute_var(results.data$s1, mean(results.data$s1))+
#                  0.25*compute_var(results.data$s2, mean(results.data$s2))+
#                   0.5*cov(results.data$s1,results.data$s2)
var_avg <- 0.25*var(results.data$s1)+
0.25*var(results.data$s2)+
0.5*cov(results.data$s1,results.data$s2)
pred_sig_sq2<-var_avg-0.5
sigma<-sqrt(2)
N=100000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=sigma)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
#calculating the variance of s1 to estimate sigma squared g
compute_var<-function(s1_v,mean){
sum<-0
for(s1 in s1_v){
sum<-(s1-mean)^2+sum
}
var<-sum/N
return(var)
}
compute_var(results.data$s1, mean(results.data$s1))
#confidence interval
#right now assuming 95% confidence interval
#Large degrree of freedom
var<-var(results.data$s1)
pred_sig_sq <- var-1
rnorm(var,sqrt(2*var()))
criticalValue=1.959964
chiSquaredUpper<-((criticalValue+sqrt(2*(N-1)-1))^2)/2
chiSquaredLower<-((-criticalValue+sqrt(2*(N-1)-1))^2)/2
compute_confidence<-function(var){
upperBound<-((N-1)*var)/chiSquaredLower
lowerBound<-((N-1)*var)/chiSquaredUpper
confidence<-c(lowerBound,upperBound)
return(confidence)
}
compute_confidence(compute_var(results.data$s1, mean(results.data$s1)))
#now using s1 and s2 to estimate
#distribution of the average (s1+s2)/2
#different when using our own function from using r function var
# var_avg <- 0.25*compute_var(results.data$s1, mean(results.data$s1))+
#                  0.25*compute_var(results.data$s2, mean(results.data$s2))+
#                   0.5*cov(results.data$s1,results.data$s2)
var_avg <- 0.25*var(results.data$s1)+
0.25*var(results.data$s2)+
0.5*cov(results.data$s1,results.data$s2)
pred_sig_sq2<-var_avg-0.5
sigma<-sqrt(2)
N=100000
sampleSize=10000
lamda <- rnorm(n=N, mean=0, sd=sigma)
results<-matrix(nrow=N, ncol=3)
for(i in 1:N){
results[i,1] = lamda[i]
results[i,c(2,3)] <- rnorm(n=2,mean=lamda[i],sd=1)
}
results.data=as.data.frame(results)
colnames(results.data)=c("lamda", "s1", "s2")
#calculating the variance of s1 to estimate sigma squared g
compute_var<-function(s1_v,mean){
sum<-0
for(s1 in s1_v){
sum<-(s1-mean)^2+sum
}
var<-sum/N
return(var)
}
compute_var(results.data$s1, mean(results.data$s1))
#confidence interval
#right now assuming 95% confidence interval
#Large degrree of freedom
var<-var(results.data$s1)
pred_sig_sq <- var-1
rnorm(var,sqrt(2*var()))
criticalValue=1.959964
chiSquaredUpper<-((criticalValue+sqrt(2*(N-1)-1))^2)/2
chiSquaredLower<-((-criticalValue+sqrt(2*(N-1)-1))^2)/2
compute_confidence<-function(var){
upperBound<-((N-1)*var)/chiSquaredLower
lowerBound<-((N-1)*var)/chiSquaredUpper
confidence<-c(lowerBound,upperBound)
return(confidence)
}
compute_confidence(compute_var(results.data$s1, mean(results.data$s1)))
#now using s1 and s2 to estimate
#distribution of the average (s1+s2)/2
#different when using our own function from using r function var
# var_avg <- 0.25*compute_var(results.data$s1, mean(results.data$s1))+
#                  0.25*compute_var(results.data$s2, mean(results.data$s2))+
#                   0.5*cov(results.data$s1,results.data$s2)
var_avg <- 0.25*var(results.data$s1)+
0.25*var(results.data$s2)+
0.5*cov(results.data$s1,results.data$s2)
pred_sig_sq2<-var_avg-0.5
